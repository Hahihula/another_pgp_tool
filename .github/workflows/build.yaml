name: Build and Release Dioxus App

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  APP_NAME: another_pgp_tool

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x86_64
          - os: macos-13
            target: aarch64-apple-darwin
            artifact_name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev libxdo-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add ${{ matrix.target }}

      - name: Install Dioxus CLI
        run: |
          cargo install cargo-binstall
          cargo binstall dioxus-cli --force
          dx --version

      - name: Build project
        run: |
          # cargo build --release --target ${{ matrix.target }}
          dx build --release
          
      - name: Bundle app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release/
          cp target/dx/${{ env.APP_NAME }}/release/linux/app/${{ env.APP_NAME }} release/${{ env.APP_NAME }}-${{ matrix.artifact_name }}
          chmod +x release/${{ env.APP_NAME }}-${{ matrix.artifact_name }}
          ls -l release

      - name: Bundle app (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p release/${{ env.APP_NAME }}-${{ matrix.artifact_name }}.app/Contents/MacOS
          cp -r target/dx/another_pgp_tool/release/macos/AnotherPgpTool.app release/${{ env.APP_NAME }}-${{ matrix.artifact_name }}.app

      - name: Bundle app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          copy target\dx\${{ env.APP_NAME }}\release\windows\app\${{ env.APP_NAME }}.exe release\${{ env.APP_NAME }}-${{ matrix.artifact_name }}.exe

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.artifact_name }}
          path: release/${{ env.APP_NAME }}-${{ matrix.artifact_name }}*
          if-no-files-found: error
          
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List files
        run: ls -R
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            **/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}